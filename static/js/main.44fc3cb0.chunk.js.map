{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","Default","sortType","setSortType","isReversed","setIsReversed","sortedGoods","goods","sortKey","tempGoods","sort","goodA","goodB","Alphabeticaly","localeCompare","By_Length","length","reverse","getPreparedGoods","className","type","cn","onClick","Reverse","Reset","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBYA,E,0EAbCC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGUD,K,WAAAA,E,oCAAAA,E,2BAAAA,E,cAAAA,E,mBAAAA,M,KAqCL,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,SAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SACEC,EACAC,EACAJ,GAEA,IAAMK,EAAS,YAAOF,GAqBtB,OAnBIC,GACFC,EAAUC,MAAK,SAACC,EAAOC,GACrB,OAAQJ,GACN,KAAKX,EAASgB,cACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKf,EAASkB,UACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAKXZ,GACFK,EAAUQ,UAGLR,EAOaS,CAClBpB,EAAiBI,EAAUE,GAQ7B,OACE,sBAAKe,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYnB,IAAaL,EAASgB,gBAGtCS,QAAS,WACPnB,EAAYN,EAASgB,gBAVzB,SAaGhB,EAASgB,gBAGZ,wBACEO,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,WAAYnB,IAAaL,EAASkB,YAEpCO,QAAS,WACPnB,EAAYN,EAASkB,YANzB,SASGlB,EAASkB,YAGZ,wBACEK,KAAK,SACLD,UAAWE,IAAG,SAAU,aAAc,CACpC,YAAajB,IAEfkB,QAAS,kBAAMjB,GAAeD,IALhC,SAOGP,EAAS0B,WAGVrB,GAAYE,IACZ,wBACEgB,KAAK,SACLD,UAAU,4BACVG,QAlDqB,WAC7BnB,EAAYN,EAASI,SACrBI,GAAc,IA6CR,SAKGR,EAAS2B,WAKhB,6BACGlB,EAAYmB,KAAI,SAAAC,GAAI,OACnB,oBACE,UAAQ,OADV,SAIGA,GAFIA,YCzHjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.44fc3cb0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport enum SortType {\n  Default = '',\n  Alphabeticaly = 'Sort alphabetically',\n  By_Length = 'Sort by length',\n  Reset = 'Reset',\n  Reverse = 'Reverse',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortKey: SortType,\n  isReversed: boolean,\n) {\n  const tempGoods = [...goods];\n\n  if (sortKey) {\n    tempGoods.sort((goodA, goodB) => {\n      switch (sortKey) {\n        case SortType.Alphabeticaly:\n          return goodA.localeCompare(goodB);\n\n        case SortType.By_Length:\n          return goodA.length - goodB.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    tempGoods.reverse();\n  }\n\n  return tempGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.Default);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const sortedGoods = getPreparedGoods(\n    goodsFromServer, sortType, isReversed,\n  );\n\n  const handleClearButtonClick = () => {\n    setSortType(SortType.Default);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.Alphabeticaly,\n            },\n          )}\n          onClick={() => {\n            setSortType(SortType.Alphabeticaly);\n          }}\n        >\n          {SortType.Alphabeticaly}\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.By_Length,\n          })}\n          onClick={() => {\n            setSortType(SortType.By_Length);\n          }}\n        >\n          {SortType.By_Length}\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          {SortType.Reverse}\n        </button>\n\n        {(sortType || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleClearButtonClick}\n          >\n            {SortType.Reset}\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {sortedGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}